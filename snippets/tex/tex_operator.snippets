global !p

def math():
	return vim.eval("vimtex#syntax#in_mathzone()") == "1"

endglobal

context "math()"
snippet "(?<!\\)(sin|cos|tan|arctan|arccot|cot|sec|csc|ln|log|exp|star|perp|cdot|cdots|times|cap|cup|circ|quad|qquad)" "singals" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "(?<!\\)([2-3])?int(\S+)?( )?(\S+)?" "supper int" wr
`!p
a = ((int(match.group(1)) - 1)*"i" + "int") if match.group(1) is not None  else "int"
b = "_{" + match.group(2) + "}" if match.group(2) is not None else ""
c = "^{" + match.group(4) + "}" if match.group(4) is not None else ""
snip.rv = "\\" + a + b + c
` ${1:`!p snip.rv = "f(x,y)" if match.group(1) == "2" else ( "f(x,y,z)" if match.group(1) == "3" else "f(x)")`} \mathrm{d}${2:`!p snip.rv = "\sigma" if match.group(1) == "2" else ( "v" if match.group(1) == "3" else "x")`}
endsnippet

context "math()"
snippet summ "\sum\limits" wA
\sum\limits_{$1}^{$2}$0
endsnippet

context "math()"
snippet prodd "\prod\limits" w
\prod\limits_{$1}^{$2}$0
endsnippet

context "math()"
snippet ip "inner product <*,*>" i
\big< $1 \big>$0
endsnippet

context "math()"
snippet limm "\lim\limits_{}" i
\lim\limits_{${1:x}\to ${2:x_0}} ${3:f(x)}$0
endsnippet

context "math()"
snippet lims "\lim_{\substack{}}" i
\lim_{\substack{$1}}$0
endsnippet

context "math()"
snippet bu "bullet" wA
\bullet
endsnippet

context "math()"
snippet mod "norm/module" wA
\left| $1 \right| $0
endsnippet

context "math()"
snippet oiint "oiint in Obsidian" wA
\underset{ ${1:\Sigma} \;}{ {\rlap{\mspace{1mu} \boldsymbol{\bigcirc}}{\rlap{\int}{\;\int}}} } $0
endsnippet
