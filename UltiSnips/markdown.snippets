extends tex

global !p

def text():
	return vim.eval("vimtex#syntax#in_mathzone()") == "0"

endglobal

###########################
# Sections and Paragraphs #
###########################

context "text()"
snippet "h([1-6])" "Heading x" brA
`!p
a = int(match.group(1))
snip.rv = "#" * a + " "
`${1:${VISUAL:Heading title}}

${2}
endsnippet

##########################
#  Markdonw Base Syntax  #
##########################

snippet test "Description" 
`!p snip.rv = text()`
endsnippet

context "text()"
snippet link "Link to something"
[$1](${4:https://${2:www.github.com/}$3})$0
endsnippet

context "text()"
snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

context "text()"
snippet ci "Inline code" i
\`$1\`$0
endsnippet

context "text()"
snippet cb "Codeblock" b
\`\`\`${1:tex}
$2
\`\`\`
$0
endsnippet

context "text()"
snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:http://${3:www.url.com}} "${5:$4}"
endsnippet

context "text()"
snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

###################
# Text formatting #
###################

context "text()"
snippet it "italics" i
<i>${1:${VISUAL}}</i>$0
endsnippet

context "text()"
snippet bo "bold" i
<b>${1:${VISUAL}}</b>$0
endsnippet

context "text()"
snippet bi "bold italics" i
<b><i>${1:${VISUAL}}</i></b>$0
endsnippet

context "text()"
snippet st "strikethrough" w
<s>$1</s>$0
endsnippet

context "text()"
snippet ul "underline" i
<u>$1</u>$0
endsnippet

context "text()"
snippet ol "ordered list" b
1. $1
2. $2
endsnippet

context "text()"
snippet ult "unordered list" b
- $1
- $2
endsnippet

context "text()"
snippet task "task" b
- [$1] $0

endsnippet

context "text()"
snippet ct "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

###########
#  Space  #
###########
snippet nb "nbsp one space" w
&nbsp;$0
endsnippet
snippet nnb "two space" w
&nbsp;&nbsp;$0
endsnippet
snippet en "two sapce" w
&ensp;$0
endsnippet
snippet een "enspensp" w
&ensp;&ensp;$0
endsnippet
snippet em "emsp" w
&emsp;$0
endsnippet
snippet eem "emspemsp" w
&emsp;&emsp;$0
endsnippet

##############
#  HTML EXP  #
##############
context "text()"
snippet cs "A collapsible section containing markdown" b
<details>
	<summary>${1:${VISUAL}}</summary>
${2:${VISUAL}}
</details>
$0
endsnippet

context "text()"
snippet fc "font color" w
<font color=${1:green}>${2:${VISUAL}}</font>$0
endsnippet

context "text()"
snippet bc "background color" w
<span style="background-color:${1:#ffcce5}">${2:${VISUAL}}</span>$0
endsnippet

context "text()"
snippet br "newline" wA
<BR>
endsnippet

context "text()"
snippet sub "subscript" i
<sub>$1</sub>$0
endsnippet

context "text()"
snippet sup "supscript" i
<sup>$1</sup>$0
endsnippet

context "text()"
snippet hl "Description" i
<mark>$1</mark> $0
endsnippet

context "text()"
snippet q "quote" w
<q>${1:${VISUAL}}</q> $0
endsnippet

context "text()"
snippet bq "blockquote" w
<blockquote>
${1:${VISUAL}}
</blockquote>
endsnippet

###########
#  LaTex  #
###########
context "text()"
snippet t "$...$" w
$${1:${VISUAL}}$ $0
endsnippet

context "text()"
snippet tt "$$...$$" b
$$
${1:${VISUAL}}
$$
endsnippet

context "text()"
snippet '(?<!\\)([0-9])([0-9])tb' "new table" r
$1`!p 
x=match.group(1)
y=match.group(2)
row1=""
row2="" 
for i in range(int(x)):
    row1+="| "
    row2+="|:-:"
row1+="|\n"
row2+="|\n"
out=row1+row2+int(y)*row1
snip.rv=out
`$0
endsnippet
